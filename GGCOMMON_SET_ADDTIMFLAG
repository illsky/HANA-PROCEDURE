CREATE PROCEDURE "COMMON"."SINOPEC.XTGL.03_COMMON.002_PROCEDURE::GGCOMMON_SET_ADDTIMFLAG" ( 
IN  I_OPTION  NVARCHAR(1),
IN  I_SCHEMA  NVARCHAR(50),
OUT O_MESSAGE NVARCHAR(500)
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
AS	
 	/******************************************************
     Name: 
          GGCOMMON_SET_ADDTIMFLAG， 给指定的表增加时间戳、更新标示功能
     Function:
       	 1，用于给指定的schema或者表增加时间戳、更新标示字段，方便做增量判断和PLT迁移,支持行表、列表；
       	 2，当I_OPTION给1时，需要同时指定I_SCHEMA参数，是对该SCHEMA下所有的ROW/COLUMN表进行操作；
       	 3，当I_OPTION给2时，需要往配置表里填充需要加字段的表，配置表如下：    
       	    "COMMON"."SINOPEC.XTGL.03_COMMON.001_DATA::ADDTIMFLAG.GG_ADDTIMFLAG_TABLES"
       	    插入数据的语句参考如下：
       	    inserT into "COMMON"."SINOPEC.XTGL.03_COMMON.001_DATA::ADDTIMFLAG.GG_ADDTIMFLAG_TABLES" values ('PHQZHAO','T002','');  
       	 4，应用实例：
       	 	CALL "COMMON"."SINOPEC.XTGL.03_COMMON.002_PROCEDURE::GGCOMMON_SET_ADDTIMFLAG" ('1','PHQZHAO',?);
	    	CALL "COMMON"."SINOPEC.XTGL.03_COMMON.002_PROCEDURE::GGCOMMON_SET_ADDTIMFLAG" ('2','',?);   
     Input:
        IN  I_OPTION  NVARCHAR(1),SCHEMA/具体表 的切换标示，只能输入1或者2，具体功能见上文；
        IN  I_SCHEMA  NVARCHAR(50),当I_OPTION是1时，必须指定系统中存在的SCHEMA名字给参数I_SCHEMA；
     output:
        O_MESSAGE，返回消息。
     create/updated by : 
       phqzhao, 2018/1/12 创建存储过程；
       PHQZHAO,2018/1/17 时间戳字段改成26位，与PLT保持一致
	******************************************************/  
BEGIN
DECLARE P_SNO INTEGER ;
DECLARE P_NO1 INTEGER DEFAULT 0;
DECLARE STR_SQL1 NVARCHAR(2000);
DECLARE STR_SQL2 NVARCHAR(2000);
--将参数表中所有不含这俩字段的表放入cursor
DECLARE CURSOR CUR_Q1 FOR 
	select A.schema_name SCHEMA_NAME ,A.table_name TABLE_NAME  
	from "COMMON"."SINOPEC.XTGL.03_COMMON.001_DATA::ADDTIMFLAG.GG_ADDTIMFLAG_TABLES" A
	JOIN TABLES B ON A.SCHEMA_NAME  = B.SCHEMA_NAME AND A.TABLE_NAME = B.TABLE_NAME WHERE  
	B.TABLE_TYPE IN ('ROW','COLUMN') AND 
	B.IS_USER_DEFINED_TYPE = 'FALSE'
	MINUS
	select distinct a.schema_name schema_name, a.table_name table_name  from 
	table_columns a join "COMMON"."SINOPEC.XTGL.03_COMMON.001_DATA::ADDTIMFLAG.GG_ADDTIMFLAG_TABLES"  b
	on a.schema_name = b.schema_name and a.table_name = b.table_name
	where a.column_name in ('IUUC_FLAG','IUUC_TIMESTAMP');
--将SCHEMA中所有不含这俩字段的表放入cursor
DECLARE CURSOR CUR_Q2 FOR 
	select distinct A.schema_name schema_name, A.table_name table_name  from 
	table_columns A JOIN TABLES B ON A.SCHEMA_NAME  = B.SCHEMA_NAME AND A.TABLE_NAME = B.TABLE_NAME
 	WHERE A.SCHEMA_NAME = :I_SCHEMA AND B.TABLE_TYPE IN ('ROW','COLUMN') AND 
	B.IS_USER_DEFINED_TYPE = 'FALSE'   MINUS
	select distinct schema_name schema_name, table_name table_name  from 
	table_columns WHERE SCHEMA_NAME = :I_SCHEMA AND  column_name In ('IUUC_FLAG','IUUC_TIMESTAMP');

DECLARE MYCOND1 CONDITION FOR SQL_ERROR_CODE 10001;
DECLARE EXIT HANDLER FOR SQLEXCEPTION 
begin	
	SELECT ::SQL_ERROR_CODE|| ::SQL_ERROR_MESSAGE INTO O_MESSAGE FROM DUMMY;
end;

IF I_OPTION = '1'  --指定SCHEMA
THEN
--判断CURSOR是否有内容
	SELECT COUNT(*) INTO P_SNO FROM SCHEMAS WHERE SCHEMA_NAME = :I_SCHEMA;
	IF :I_SCHEMA = '' OR :I_SCHEMA IS NULL OR P_SNO = 0 THEN
		SIGNAL MYCOND1 SET MESSAGE_TEXT = '没有找到该SCHEMA名称。';
	ELSE
	--判断CURSOR是否有内容
	 OPEN  CUR_Q2;
	  FOR CUR AS CUR_Q2 DO
       SELECT  ' alter table "' || CUR.SCHEMA_NAME || '"."' || CUR.TABLE_NAME||
       '" add(	 "IUUC_FLAG" NVARCHAR(1) default '''' ,"IUUC_TIMESTAMP" NVARCHAR(26) default '''')	' INTO STR_SQL2  FROM DUMMY;
       EXEC :STR_SQL2;
 --计数处理个数；      
 	   P_NO1 := :P_NO1 + 1;
 	  END FOR;
 	  IF :P_NO1 < 1 THEN 
 	    SIGNAL MYCOND1 SET MESSAGE_TEXT = 'SCHEMA:'||:I_SCHEMA||'没有需要处理的表。';
 	  ELSE
  	  	O_MESSAGE := 'SCHEMA: '||:I_SCHEMA || ' 处理完毕，共处理'||:P_NO1||'张表。';
  	  END IF ;
	END IF;

ELSEIF I_OPTION = '2'  --按配置表输入
THEN
--LOOP，并每个表增加2字段；
	  FOR CUR AS CUR_Q1 DO
      SELECT  ' alter table "' || CUR.SCHEMA_NAME || '"."' || CUR.TABLE_NAME||
       '" add(	 "IUUC_FLAG" NVARCHAR(1) default '''' ,"IUUC_TIMESTAMP" NVARCHAR(26) default '''')	' INTO STR_SQL1  FROM DUMMY;
       EXEC :STR_SQL1;
 --处理完的表将FLAG字段置为X；      
       UPDATE  "COMMON"."SINOPEC.XTGL.03_COMMON.001_DATA::ADDTIMFLAG.GG_ADDTIMFLAG_TABLES"  SET FLAG = 'X' WHERE 
       SCHEMA_NAME = CUR.SCHEMA_NAME AND TABLE_NAME = CUR.TABLE_NAME;
 --计数处理个数；      
 	   P_NO1 := :P_NO1 + 1;
 	  END FOR;
 	  IF :P_NO1 < 1 THEN
 	  SIGNAL MYCOND1 SET MESSAGE_TEXT = '没有找到需要更改的表。';
 	  ELSE
  	    O_MESSAGE := '指定表处理完毕，共处理'||:P_NO1||'张表。';
  	  END IF;
ELSE  --其他情况，
	SIGNAL MYCOND1 SET MESSAGE_TEXT = '第一个参数输入有误。';
END IF;
--释放CURSOR
CLOSE CUR_Q1;
CLOSE CUR_Q2;
END;
